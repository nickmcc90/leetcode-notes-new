2/23/24

We can see that rainwater is stored in a container of 3 values (or it takes 3 values in the
array to see if we can store water). The first and third values make
it so that the rainwater is stored. The smallest of the first and third values times the space in between is
the amount of water that can be between the two boundaries, given that there aren't any blocks
between them. This leads me to take a two pointer approach while adding and/or subtracting blocks and water
as we go along, but let's see this first method that neetcode shows us.

Method #1: 3 storage arrays and subtraction. Time: O(n) Space: O(n);

First, we iterate through the array from left to right and calculate the max left height from
a current index, and store it in a MaxLeft array. Next, we iterate through the array from right
to left and find the max right height from a current index, and store it in a MaxRight array.
Then, we take the minimum of those values from each array at a specific index and store that in
a minimum value array. Then, we iterate through the initial given index and subtract the values
in the minimum array with the values in the initial given array. We don't take negatives, if there
is one, then we round up to zero.

Method #2: Two pointers

So we have a left and a right pointer at the ends of the given array. We have two variables that keep track
of the max value that the left pointer has ever been, and the same for the right pointer. We record these
values. We move a pointer inside if it is the smaller of the two. We calculate the water that each position
in the array can hold instead of calculating the water inbetween the two pointers every instance. We calculate
the water being stored at each index by subtracting the value at our current index pointer (the pointer we just
moved, which is the smallest one) and the max value that has been recorded for that pointer. Again, we move
the pointer that is currently the smallest of the two. If the pointers are both equal, we move either one.

class Solution {
public:
    int trap(vector<int>& height) {
        if(!height) return 0; // case for if the array is empty.

        int left = 0, right = height.size() - 1; // initializing pointers.
        int leftMax = height[left], rightMax = height[right]; // initializing max value recorders.
        int result = 0; // this variable will total the water for us.

        while(left < right) {
          if(leftMax < rightMax) {
            left++;
            leftMax = max(leftMax, left);
            result += leftMax - height[left];
          } else {
            right--;
            rightMax = max(rightMax, right);
            result += rightMax - height[right];
          }
        }

        return result;
    }
};

// what i learned from this problem:
// if I'm having trouble with solving a problem one way, let me take a step back
// and see if I can do it another way. For instance, I was going with the two pointers
// idea, and was trying to calculate the water across all spaces between the two pointers.
// I was running into issues. I could have taken a step back and been like, 'what if I try
// to calculate the water at each index, instead of the whole space?'