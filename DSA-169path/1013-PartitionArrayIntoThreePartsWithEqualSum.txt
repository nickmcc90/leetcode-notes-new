2/23/24

Tags: Array, Prefix Sum

The idea is to add up the whole array, then multiply this value by 1/3. Then, we use prefix sums through the array
until it adds up to the 1/3 value, and mark this index as one of the partitions, if we find a second partition that
sums up to the 1/3 value, then we can mark that index too, and at this point, we know that the third partition is
the remaining 1/3 value. This function returns a boolean value.


My method first:

class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& arr) {
        int sum = 0;
        sum = accumulate(arr.begin(), arr.end(), sum);    // adding up the entire array.

        sum /= 3;     // This will be our partition length.

        int prefixSum = 0;        // this will help us find our equivalent sections.
        int count = 0;
        for(int i = 1; i < arr.size(); i++) {
          prefixSum = arr[i] + arr[i-1];
          if(prefixSum == sum) {
            prefixSum = 0;    // reset our prefixSum
            i++;            // increase our i to get into our next partition.
            count++;
          }
          if(count == 2) return true;   // this lets us break out of the loop early
        }

        return false;
    }
};

Video solution method:
(differences: included modulus to return false, used a better for loop with the values and not the indexes, solved the counter equal to 2 problem.)

class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& arr) {
        int sum = 0;
        sum = accumulate(arr.begin(), arr.end(), sum);    // adding up the entire array.
        if(sum % 3) return false;       // if this sum % 3 is true, then the sum isn't a multiple of 3. So we can't return the equal parts.
        sum /= 3;

        int accum = 0, counter = 0;
        for(auto num : arr) {
          if(counter == 2) return true;     // we have the counter up here to ensure that the counter isn't equal to two when it's the last element.
          accum += num;
          if(accum == sum) {
            counter++;
            accum = 0;        // we need to reset the accum for the next partition
          }
        }
        return false;
    }
};