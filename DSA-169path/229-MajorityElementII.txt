2/27/24

Tags: Boyer-Moore Majority Vote algorithm 

I solved this one on my own, here's the C++ solution with time O(n) and space O(n):

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        vector<int> result;
        unordered_map<int,int> map;
        int count = int(nums.size() / 3);

        for(int el : nums) {
            map[el]++;
        }

        for(auto p : map) {
            if(p.second > count) {
                result.push_back(p.first);
            }
        }
        return result;
    }
};

How about linear time and constant space? Ok. We are still going to use a hashmap, but make it
such that this hashmap takes up constant space, actually, only less than 3 items in it always.

As we iterate through the array, we add the value and its frequency to the map. We don't want our size
of the map going over 3, so once we reach 3 elements, we decrement all the elements by one. This works out,
trust me. It's a hard solution to come up with but it works. Then we return the values that are left in the map.
If there are none, then are none. However, if we have some elements to return, we need to check their actual count
to see if its bigger than n/3, then we return it. 


Python

class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        count = defaultdict(int)

        for n in nums:        # if n is not in the hashmap, it'll create it.
            count[n] += 1

            if len(count) <= 2:
                continue;
            new_count = defaultdict(int)
            for n, c in count.items(): 
                if c > 1:
                    new_count[n] = c - 1
            count = new_count

        res = []
        for n in count:
            if nums.count(n) > len(nums) / 3:
                res.append(n)
        return res

