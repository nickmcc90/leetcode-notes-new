2/28/24

Tags: Sorting, arrays, bucket Sorting

HARD

This code I wrote takes nlogn time to sort, then O(n + n) to sort through the array then sort
through the hashmap. We need a solution that runs in linear time and takes linear space.
Bucket sorting is the strategy probably.

I wrote this solution here because I thought two successive elements meant two pairs LOL.

class Solution:
    def maximumGap(self, nums: List[int]) -> int:
        if len(nums) < 2: return 0


        hashmap = {}
        nextdiff = 0
        nums.sort()
        for x in range(1, len(nums)):
            diff = nums[x] - nums[x-1]
            if(x != 1 and diff == nextdiff):
                hashmap[diff] += 1
            nextdiff = diff
        maxValue = 0
        for d, f in hashmap.items():
            maxValue = max(maxValue, d)
        return maxValue


Here is the code I meant to write:

class Solution:
    def maximumGap(self, nums: List[int]) -> int:
        if len(nums) < 2: return 0

        nums.sort()
        output = 0
        for x in range(1, len(nums)):
            output = max(output, nums[i] - nums[i-1])
        return output


Bucket sorting does linear time sorting. Bucket sort algo:

A bucket sort algorithm divides an unsorted array into several buckets.
We can get these buckets by following:
Range of each bucket = (max - min) / n              n is the number of buckets which we can specify.
Depending on the number of buckets, the above equation will give us the range of each bucket.

For this problem, we are gonna put all our numbers into n - 1 buckets.


So this algorithm is pretty complex, but I will try to explain it in steps first, then you can
just memorize/develop the skill of coming up with this solution in the future.

1. First, we get the 'indexes' of the elements in the unsorted array. I say 'indexes' because based
on the proximity of each element to one another, they will be grouped into an index class which
has elements that are close in size. In a list in python, we will store the element value into
each index class. This will make however many mini groups, which should be less than n - 1.
2. Then, we get the maximum value and the minimum value from each index class. We store these max
and min pairs into a set, and push it into a list called buckets.
3. Finally, we iterate through the buckets array. We subtract the max value from a previous set from the min value
of the next set. It works out that these two elements would be next to each other if the array was sorted.
We store this result in a variable, and as we iterate through the array, we keep updating the max
difference. 

This gives us our answer! Here's the code.

class Solution:
    def maximumGap(self, nums: List[int]) -> int:
        n = len(nums)
        low, high = min(nums), max(nums)      # init of the range values.
        B = defaultdict(list)     # this makes it so that we don't have to check if what we are putting into the list exists before we put it in.
        
        for num in nums:          # step 1
            if num == high:
                idx = n - 1
            else:
                idx = (abs(low-num)*(n-1)) / (high-low)        # this is just the formula we have to know for grouping in index classes.
            B[idx].append(num) # we append here because the idx points to the num value.

        buckets = []    # buckets is a list of lists
        for i in range(n):        # step 2
            if B[i]:
                buckets.append((min(B[i]), max(B[i])))

        output = 0
        for i in range(1, len(buckets)):      # step 3. We start at one so that we start at a bucket and then subtract it from a previous bucket.
            output = max(output, abs(buckets[i-1][-1] - buckets[i][0]))
        return output

This may seem like a bunch but it's just stuff you have to know.