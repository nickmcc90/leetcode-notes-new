3/14/24

Tags: Sorting, Array, Stack, Greedy, Two Pointers

MEDIUM

This looks easy, what I seeing is that if a start time is less than the
previous interval's end time, they need to be combined. They can be combined
by taking the min of both left numbers and the max of both right numbers. We
just iterate through the array in O(n) time, with O(1) space.

Don't forget that we have to sort the input!

C++

if(intervals.size() < 2) {
  return intervals;
}

sort(intervals.begin(), intervals.end());

vector<vector<int>> res;

res.push_back(intervals[0]);
for(int i = 1; i < intervals.size(); i++) {
if(intervals[i][0] <= res.back()[1]) {
  if(intervals[i][1] > res.back()[1]) {
    res.back()[1] = intervals[i][1];
  }
} else {
  res.push_back(intervals[i]);
}
}
return res