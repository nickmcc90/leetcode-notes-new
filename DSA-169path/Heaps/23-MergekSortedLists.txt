4/25/24

Tags: Divide & Conquer, Priority Queue

HARD

We should do problem 21 first, because that is a subset of this problem.

So we take two linked lists at a time and combine them. We send the pairs to
our mergeList function which is what we've done in 21-MergeTwoSortedLists.txt


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        if not lists or len(lists) == 0:
            return None

        while len(lists) > 1:
            mergedList = []

            for i in range(0, len(lists), 2):
                l1 = lists[i]
                l2 = lists[i+1] if (i+1) < len(lists) else None
                mergeList(l1, l2)


        return lists[0]

    def mergeList(self, l1, l2):


<timestamp 8:06>