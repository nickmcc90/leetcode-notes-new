4/5/2024

Tags: Heap (Priority Queue), lld

MEDIUM

I have no idea how to get through this problem, but let's get through a little
bit of the solution video at a time. I'm at work on 4/5/2024 a Friday, ready to
go home. I don't even have to make dinner so this weekend is gonna be great! Alright
let's get it.

Solution:
This problem comes down to trade-offs with different data structures that we could use to make
each function decently efficient.

We could implement the follow function by using a hashmap that links a key to a list of followeeIds.

<timestamp: 2:23, let's have a good weekend :3>

mmm let's implement a hashset since we can add and remove numbers in O(1) time for the follow and
unfollow code.

Let's move on to PostTweet. Instead of a hashset, we can do a hashlist. For each post, we just add that
new post to the end of the list for that user in the map.

GetNewsFeed. We need to get the 10 most recent tweets from the lists of the people that this person
follows. Someone's most recent tweet is going to be at the end of the list in postTweet. It would be smart to include
the time that each post was made within the list. So, instead of just a list of ints, we will have a list of pairs in postTweet.
Instead of time, we will have a count. The count will decrement with each post made globally so that we can
use a min heap in python. (we can increment the count normally if we were using java or something.)


We need to have the most recent tweets though. For however many people that a person follows,
we can have a pointer at the end of each postTweet array. We decrement a pointer to the left based
on which of the pointers is the most recent. This would mean checking each value.
Orrrrr, we can just take each of these end values at the end of postTweet and put them in a minHeap. Much
quicker. But, it would take k log k to push all these values into the min heap.
Either way, each option is good. Generally heaps are better if we needed n heaps.

class Twitter:

    def __init__(self):
        self.count = 0
        self.tweetMap = defaultdict(list) #userID -> list of [count, tweetIDs]
        self.followMap = defaultdict(set) # userID -> set of followee IDs

    def postTweet(self, userId: int, tweetId: int) -> None:
        self.tweetMap[userId].append([self.count, tweetId])
        self.count -= 1

    def getNewsFeed(self, userId: int) -> List[int]:
        res = []
        minHeap = []
        
        self.followMap[userId].add(userId)
        for followeeId in self.followMap[userId]: #we want the most recent tweet this person created.
            if followeeId in self.tweetMap:
                index = len(self.tweetMap[followeeId])-1
                count, tweetId = self.tweetMap[followeeId][index]
                minHeap.append([count, tweetId, followeeId, index - 1])
        heapq.heapify(minHeap)
        while minHeap and len(res) < 10:
            count, tweetId, followeeId, index = heapq.heappop(minHeap)
            res.append(tweetId)
            if index >= 0:
                count, tweetId = self.tweetMap[followeeId][index]
                heapq.heappush(minHeap, [count, tweetId, followeeId, index - 1])

        return res
            

    def follow(self, followerId: int, followeeId: int) -> None:
        self.followMap[followerId].add(followeeId)

    def unfollow(self, followerId: int, followeeId: int) -> None:
        if followeeId in self.followMap[followerId]:
            self.followMap[followerId].remove(followeeId)


# Your Twitter object will be instantiated and called as such:
# obj = Twitter()
# obj.postTweet(userId,tweetId)
# param_2 = obj.getNewsFeed(userId)
# obj.follow(followerId,followeeId)
# obj.unfollow(followerId,followeeId)

<timestamp: 20:05>