3/6/24

Tags: Two Pointers, Array, Greedy, Math

MEDIUM

Now that I understand this problem, here's how I would do it.
There would be two pointers at the beginning and end of the array. We have initialized
variables of left, right, width (left minus right pointer), height (the min of the left
and right pointer), curOutput (the multiplication of the width and height for a specific
instance), and maxOutput (the max of curOutput and maxOutput).
We start off with the left and right pointers being at the front and back of the array. First,
we subtract right - minus to get the width. Then we take the min of left and right to get the
height. Then we mulitply width and height to get our current output curOutput. Then, we put
that into maxOutput within a max function. Then after all that, we move the pointer inward that
is the smallest of the two pointers. We do this until the pointers cross each other.

This is what I had at first (C++):

class Solution {
public:
    int maxArea(vector<int>& height) {
        int left = 0, right = height.size() - 1;
        int width = 0, tall = 0;
        int curOutput = 0;
        int maxOutput = 0;

        while(left < right) {
            width = right - left;
            tall = min(height[right], height[left]);
            curOutput = width * tall;
            maxOutput = max(curOutput, maxOutput);
            if(height[right] > height[left]) {
                left++;
            } else if (height[left] > height[right]) {
                right--;
            } else {
                left++;
            }
        }
        return maxOutput;
    }
};

And it was good! I didn't even need the video. (kinda)