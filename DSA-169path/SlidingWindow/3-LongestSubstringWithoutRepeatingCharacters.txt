3/7/24

Tags: Sliding Window, string, two pointers

MEDIUM

Let's see if I can solve this.

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int p = 0;
        int count = 1;
        int maxCount = 0;

        for(int i = 0; i < s.size(); i++) {
          if(s[i] == s[p] && i != 0) {
            p = i;
            maxCount = max(maxCount, count);
            count = 1;
          }
          else if(s[i] != s[p]) {
            count++;
          }
        }     
        return maxCount;
    }
};

This works sometimes, but it doesn't solve "pwwkew". This is because we are comparing all
letters with the first letter, and not other duplicate letters that can happen, like w.
Maybe storing each letter we see in an unordered map, then discarding everything once we see
a duplicate? Let's see a solution.

So we are going to use a sliding window (like the folder name says) and keep track of the unique
letters in each substring with an unordered set. If there is a duplicate when we increase our window, we remove
the earliest element from our window, and we keep removing elements from the left until we don't
have duplicates. We also keep track of the largest substring when we have it in a variable.

Time O(n) space O(n)


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
      unordered_set<char> charSet;
      int l = 0;
      int res = 0;

      for(int r = 0; r < s.size(); r++) {
        while(charSet.find(s[r]) != charSet.end()) {    // after this loop is done, there should be no duplicates in the current substring.
          charSet.erase(s[l]);
          l++;
        }
        charSet.insert(s[r]);
        res = max(res, r - l + 1);
      }
      return res;
    }
};

    