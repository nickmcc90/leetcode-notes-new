3/10/24

Tags: Sliding window, sliding window optimized

MEDIUM

There is an easy solution to this, which is to create a sliding window (wow crazy) that
is the size of s1 that goes through s2 checking to see if s1 is equal in characters to the
sliding window in s2. We check to see if they are equal by making a hashmap of s1, and also
making a hashmap of the window in s2 but updating it everytime we move over by 1 character.
This takes O(26*n) time.


There is a more optimal solution than this. We can use a single variable without having to look through
the entire hashmap of s2. Basically instead of comparing s1 and s2's hashmaps, we can use
a "matches" variable.
First we see if s1 is larger than s2; if this is the case, then we will never find a solution. Then we
initialize the arrays (or hasmaps) of the 26 letters of the alphabet. We take each letter that appears
in both s1 and s2 and put them into these arrays, with the indexes represent their position in the alphabet
and we update the frequency of these letters. Then we run through the matches that are present between these
two arrays. 
Then we create a for loop that has a left pointer of 0 and the right pointer starting at the length of s1
to create our window. We check the right most letter and the left most letter and update them into our s2
array. Then we check if that specific position is equal to that position in s1. If so, we update matches.
If not, we decrement matches. We do the plus and minus 1 thing because if there were multiple of the same
character it wouldn't matter, you could make the same permutation (?). At the end, we check to see if 
matches is 26.

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2): return False

        s1Count, s2Count = [0] * 26, [0] * 26

        for i in range(len(s1)):
            s1Count[ord(s1[i]) - ord('a')] += 1
            s2Count[ord(s2[i]) - ord('a')] += 1

        matches = 0
        for i in range(26):
            matches += (1 if s1Count[i] == s2Count[i] else 0)

        l = 0
        for r in range(len(s1), len(s2)):
            if matches == 26: return True

            index = ord(s2[r]) - ord('a')
            s2Count[index] += 1
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] + 1 == s2Count[index]:
                matches -= 1

            index = ord(s2[l]) - ord('a')
            s2Count[index] -= 1
            if s1Count[index] == s2Count[index]:
                matches += 1
            elif s1Count[index] - 1 == s2Count[index]:
                matches -= 1
            l += 1
        return matches == 26

I'm redoing the explanation of this problem because I didn't make sense before.
//timestamp: 8:20

So we start with determining the length of s1. Then we make two hashmaps for both
strings and see how many matches there are between them. It is possible to have a perfect
26 matches for a window.
//timestamp: 9:55